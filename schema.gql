# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Task {
  id: Int!
  authorId: Int!
  name: String!
  description: String
  expires: DateTime!
  isCompleted: Boolean!
  status: TaskStatus!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum TaskStatus {
  PENDING
  IN_WORK
  COMPLETED
}

type GetTaskResultType {
  """Request was successful"""
  success: Boolean!

  """Task"""
  task: Task
}

type GetTasksResultType {
  """Request was successful"""
  success: Boolean!

  """Task list"""
  tasks: Task
}

type CreateTaskResultType {
  """Request was successful"""
  success: Boolean!

  """Task"""
  task: Task
}

type TaskMutationType {
  """Create task"""
  createTask(authorId: Int!, name: String!, description: String, expires: DateTime!, isCompleted: Boolean!, status: TaskStatus!): CreateTaskResultType!
}

type TaskQueryType {
  """Get user by ID"""
  getTask(id: Int!): GetTaskResultType!

  """Get task list"""
  getTasks(authorId: Int, skip: Int, take: Int): GetTasksResultType!
}

type User {
  id: Int!
  email: String!
  username: String!
  passwordHash: String!
  firstname: String
  lastName: String
  createdAt: DateTime!
}

type UserWithoutPass {
  id: Int!
  email: String!
  username: String!
  firstname: String
  lastName: String
  createdAt: DateTime!
}

type CreateUserResultType {
  """Request was successful"""
  success: Boolean!

  """Task"""
  user: User
}

type GetUserResultType {
  """Request was successful"""
  success: Boolean!

  """User"""
  user: UserWithoutPass
}

type GetUsersResultType {
  """Request was successful"""
  success: Boolean!

  """User list"""
  users: [UserWithoutPass!]
}

type UpdateUserResultType {
  """Request was successful"""
  success: Boolean!

  """Task"""
  user: UserWithoutPass
}

type UserMutationType {
  """Create user"""
  createUser(username: String!, email: String!, password: String!, firstname: String!, lastName: String!): CreateUserResultType!

  """Update user"""
  updateUser(username: String!, email: String!, password: String!, firstname: String!, lastName: String!): UpdateUserResultType!
}

type UserQueryType {
  """Get user by ID"""
  getUser(
    """User id"""
    id: Int
  ): GetUserResultType!

  """Get user list"""
  getUsers: GetUsersResultType!
}

type Query {
  """Task queries"""
  taskQueries: TaskQueryType!

  """User queries"""
  userQueries: UserQueryType!
}

type Mutation {
  """Task mutations"""
  taskMutations: TaskMutationType!

  """User mutations"""
  userMutations: UserMutationType!
}