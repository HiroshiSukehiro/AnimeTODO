# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type StatisticUser {
  count: Int!
  userId: Int!
}

type GetStatisticResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """getStatisticByUser"""
  statistic: [StatisticUser!]
}

type StatisticMutationType {
  """Delete Statistic"""
  deleteStatistic: GetStatisticResultType!
}

type StatisticQueryType {
  """Get user by Statistic"""
  getStatistic(skip: Int, take: Int, id: Int, userId: Int, message: String, args: String, sourse: String, createdAt: DateTime): GetStatisticResultType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Task {
  id: Int!
  authorId: Int!
  name: String!
  description: String
  expires: DateTime!
  isCompleted: Boolean!
  status: TaskStatus!
  createdAt: DateTime!
  updatedAt: DateTime
}

enum TaskStatus {
  PENDING
  IN_WORK
  COMPLETED
}

type CreateTaskResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Create Task"""
  task: Task
}

type GetTaskResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """getTaskById"""
  task: Task
}

type GetTasksResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Task list"""
  tasks: [Task!]
}

type GetTasksByStatusResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Get a list of tasks by status"""
  task: [Task!]
}

type EditTaskResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Edit Task"""
  task: Task
}

type DeleteTaskResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Delete Task"""
  task: Task
}

type TaskMutationType {
  """Create task"""
  createTask(name: String!, description: String, expires: DateTime!, isCompleted: Boolean! = false, status: TaskStatus!): CreateTaskResultType!

  """Edit task"""
  editTask(id: Int!, authorId: Int, name: String, description: String, expires: DateTime, isCompleted: Boolean, status: TaskStatus): EditTaskResultType!

  """Delete task"""
  deleteTask(id: Int!): DeleteTaskResultType!
}

type TaskQueryType {
  """Get user by ID"""
  getTask(id: Int!): GetTaskResultType!

  """Get task list"""
  getTasks(skip: Int, take: Int, id: Int, authorId: Int, name: String, description: String, status: TaskStatus, expires: DateTime, isCompleted: Boolean): GetTasksResultType!

  """Get a list of tasks by status"""
  getTasksByStatus: GetTasksByStatusResultType!
  getTaskByStatus(status: TaskStatus!): GetTasksByStatusResultType!
}

type LoginResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Token"""
  token: String
}

type Log {
  id: Int!
  userId: Int!
  message: String
  args: String
  sourse: String
  createdAt: DateTime!
}

type User {
  id: Int!
  email: String!
  username: String!
  passwordHash: String!
  firstname: String
  lastName: String
  createdAt: DateTime!
}

type UserWithoutPass {
  id: Int!
  email: String!
  username: String!
  firstname: String
  lastName: String
  createdAt: DateTime!
}

type UserWithLogs {
  id: Int!
  email: String!
  username: String!
  firstname: String
  lastName: String
  createdAt: DateTime!
  tasks: [Task!]
  logs: [Log!]
}

type CreateUserResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Create User"""
  user: User
  token: String!
}

type DeleteUserResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Delete User"""
  user: User
}

type GetUserResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """User"""
  user: UserWithoutPass
}

type GetUserWithLogsResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """User with Logs"""
  user: UserWithLogs
}

type GetUsersResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """User list"""
  users: [UserWithoutPass!]
}

type UpdateUserResultType {
  """Request was successful"""
  success: Boolean!

  """Errors description"""
  errors: [String!]

  """Update User"""
  user: UserWithoutPass
}

type LoginMutationType {
  """Login"""
  login(email: String!, password: String!): LoginResultType!
}

type LoginQueryType {
  """Get user by token"""
  getUserByToken: GetUserResultType!
}

type UserMutationType {
  """Create user"""
  createUser(username: String!, email: String!, password: String!, firstname: String!, lastName: String!): CreateUserResultType!

  """Update user"""
  updateUser(username: String!, email: String!, password: String!, firstname: String!, lastName: String!): UpdateUserResultType!

  """Delete user"""
  deleteUser(email: String!, password: String!): DeleteUserResultType!
}

type UserQueryType {
  """Get user by ID"""
  getUser(
    """User id"""
    id: Int
  ): GetUserResultType!

  """Get user list"""
  getUsers: GetUsersResultType!
  getUserInfo(
    """User id"""
    id: Int
  ): GetUserWithLogsResultType!
}

type Query {
  """Statistic queries"""
  StatisticQueries: StatisticQueryType!

  """Task queries"""
  taskQueries: TaskQueryType!

  """User queries"""
  userQueries: UserQueryType!

  """Login queries"""
  loginQueries: LoginQueryType!
}

type Mutation {
  """Statistic mutations"""
  StatisticMutations: StatisticMutationType!

  """Task mutations"""
  taskMutations: TaskMutationType!

  """User mutations"""
  userMutations: UserMutationType!

  """login mutations"""
  loginMutations: LoginMutationType!
}